BEGIN
    DBMS_SCHEDULER.DROP_JOB(job_name => 'SELECT_FROM_A_JOB');
    DBMS_SCHEDULER.DROP_JOB(job_name => 'SELECT_FROM_B_JOB');
    DBMS_SCHEDULER.DROP_JOB(job_name => 'SELECT_FROM_C_JOB');
    DBMS_SCHEDULER.DROP_JOB(job_name => 'SELECT_FROM_D_JOB');

    DBMS_SCHEDULER.CREATE_JOB (
        job_name => 'SELECT_FROM_A_JOB',
        job_type => 'PLSQL_BLOCK',
        job_action => '
        DECLARE
            match_first_name varchar2(50) := ''Friedrich'';
            start_time timestamp := SYSTIMESTAMP;
        BEGIN
            DBMS_PARALLEL_EXECUTE.DROP_TASK(''SELECT_FROM_PERSON_A'');
            DBMS_PARALLEL_EXECUTE.CREATE_TASK(''SELECT_FROM_PERSON_A'');
            DBMS_PARALLEL_EXECUTE.CREATE_CHUNKS_BY_ROWID(''SELECT_FROM_PERSON_A'', ''SYSTEM'', ''PERSON_DATA_A'', true, 5000);
            DBMS_PARALLEL_EXECUTE.RUN_TASK(''SELECT_FROM_PERSON_A'', ''
                DECLARE
                    start_time timestamp := SYSTIMESTAMP;
                    count_person int;
                BEGIN
                    FOR person_a IN (SELECT * FROM PERSON_DATA_A WHERE first_name=''''''|| match_first_name ||'''''' AND ROWID BETWEEN :start_id AND :end_id)
                    LOOP
                        INSERT INTO SELECTED VALUES person_a;
                    END LOOP;
                    SELECT COUNT(*) INTO count_person from PERSON_DATA_A WHERE ROWID BETWEEN :start_id AND :end_id;
                    INSERT INTO EXECUTION_TIME VALUES (true, ''''A'''', count_person, :start_id, :end_id, start_time, SYSTIMESTAMP);
                    COMMIT;
                END;''
            , DBMS_SQL.native, parallel_level => 2);
            INSERT INTO EXECUTION_TIME VALUES (true, ''A'', null, null, null, start_time, SYSTIMESTAMP);
            COMMIT;
        END;',
        number_of_arguments => 0,
        start_date => NULL,
        repeat_interval => NULL,
        end_date => NULL,
        enabled => FALSE,
        auto_drop => FALSE,
        comments => '');

    DBMS_SCHEDULER.CREATE_JOB (
        job_name => 'SELECT_FROM_B_JOB',
        job_type => 'PLSQL_BLOCK',
        job_action => '
        DECLARE
            match_first_name varchar2(50) := ''Friedrich'';
            start_time timestamp := SYSTIMESTAMP;
        BEGIN
            DBMS_PARALLEL_EXECUTE.DROP_TASK(''SELECT_FROM_PERSON_B'');
            DBMS_PARALLEL_EXECUTE.CREATE_TASK(''SELECT_FROM_PERSON_B'');
            DBMS_PARALLEL_EXECUTE.CREATE_CHUNKS_BY_ROWID(''SELECT_FROM_PERSON_B'', ''SYSTEM'', ''PERSON_DATA_B'', true, 5000);
            DBMS_PARALLEL_EXECUTE.RUN_TASK(''SELECT_FROM_PERSON_B'', ''
                DECLARE
                    start_time timestamp := SYSTIMESTAMP;
                    count_person int;
                BEGIN
                    FOR person_b IN (SELECT * FROM PERSON_DATA_B WHERE first_name=''''''|| match_first_name ||'''''' AND ROWID BETWEEN :start_id AND :end_id)
                    LOOP
                        INSERT INTO SELECTED VALUES person_b;
                    END LOOP;
                    SELECT COUNT(*) INTO count_person from PERSON_DATA_B WHERE ROWID BETWEEN :start_id AND :end_id;
                    INSERT INTO EXECUTION_TIME VALUES (true, ''''B'''', count_person, :start_id, :end_id, start_time, SYSTIMESTAMP);
                    COMMIT;
                END;''
            , DBMS_SQL.native, parallel_level => 2);
            INSERT INTO EXECUTION_TIME VALUES (true, ''B'', null, null, null, start_time, SYSTIMESTAMP);
            COMMIT;
        END;',
        number_of_arguments => 0,
        start_date => NULL,
        repeat_interval => NULL,
        end_date => NULL,
        enabled => FALSE,
        auto_drop => FALSE,
        comments => '');

    DBMS_SCHEDULER.CREATE_JOB (
        job_name => 'SELECT_FROM_C_JOB',
        job_type => 'PLSQL_BLOCK',
        job_action => '
        DECLARE
            match_first_name varchar2(50) := ''Friedrich'';
            start_time timestamp := SYSTIMESTAMP;
        BEGIN
            DBMS_PARALLEL_EXECUTE.DROP_TASK(''SELECT_FROM_PERSON_C'');
            DBMS_PARALLEL_EXECUTE.CREATE_TASK(''SELECT_FROM_PERSON_C'');
            DBMS_PARALLEL_EXECUTE.CREATE_CHUNKS_BY_ROWID(''SELECT_FROM_PERSON_C'', ''SYSTEM'', ''PERSON_DATA_C'', true, 5000);
            DBMS_PARALLEL_EXECUTE.RUN_TASK(''SELECT_FROM_PERSON_C'', ''
                DECLARE
                    start_time timestamp := SYSTIMESTAMP;
                    count_person int;
                BEGIN
                    FOR person_c IN (SELECT * FROM PERSON_DATA_C WHERE first_name=''''''|| match_first_name ||'''''' AND ROWID BETWEEN :start_id AND :end_id)
                    LOOP
                        INSERT INTO SELECTED VALUES person_c;
                    END LOOP;
                    SELECT COUNT(*) INTO count_person from PERSON_DATA_C WHERE ROWID BETWEEN :start_id AND :end_id;
                    INSERT INTO EXECUTION_TIME VALUES (true, ''''C'''', count_person, :start_id, :end_id, start_time, SYSTIMESTAMP);
                    COMMIT;
                END;''
            , DBMS_SQL.native, parallel_level => 2);
            INSERT INTO EXECUTION_TIME VALUES (true, ''C'', null, null, null, start_time, SYSTIMESTAMP);
            COMMIT;
        END;',
        number_of_arguments => 0,
        start_date => NULL,
        repeat_interval => NULL,
        end_date => NULL,
        enabled => FALSE,
        auto_drop => FALSE,
        comments => '');

    DBMS_SCHEDULER.CREATE_JOB (
        job_name => 'SELECT_FROM_D_JOB',
        job_type => 'PLSQL_BLOCK',
        job_action => '
        DECLARE
            match_first_name varchar2(50) := ''Friedrich'';
            start_time timestamp := SYSTIMESTAMP;
        BEGIN
            DBMS_PARALLEL_EXECUTE.DROP_TASK(''SELECT_FROM_PERSON_D'');
            DBMS_PARALLEL_EXECUTE.CREATE_TASK(''SELECT_FROM_PERSON_D'');
            DBMS_PARALLEL_EXECUTE.CREATE_CHUNKS_BY_ROWID(''SELECT_FROM_PERSON_D'', ''SYSTEM'', ''PERSON_DATA_D'', true, 5000);
            DBMS_PARALLEL_EXECUTE.RUN_TASK(''SELECT_FROM_PERSON_D'', ''
                DECLARE
                    start_time timestamp := SYSTIMESTAMP;
                    count_person int;
                BEGIN
                    FOR person_d IN (SELECT * FROM PERSON_DATA_D WHERE first_name=''''''|| match_first_name ||'''''' AND ROWID BETWEEN :start_id AND :end_id)
                    LOOP
                        INSERT INTO SELECTED VALUES person_d;
                    END LOOP;
                    SELECT COUNT(*) INTO count_person from PERSON_DATA_D WHERE ROWID BETWEEN :start_id AND :end_id;
                    INSERT INTO EXECUTION_TIME VALUES (true, ''''D'''', count_person, :start_id, :end_id, start_time, SYSTIMESTAMP);
                    COMMIT;
                END;''
            , DBMS_SQL.native, parallel_level => 2);
            INSERT INTO EXECUTION_TIME VALUES (true, ''D'', null, null, null, start_time, SYSTIMESTAMP);
            COMMIT;
        END;',
        number_of_arguments => 0,
        start_date => NULL,
        repeat_interval => NULL,
        end_date => NULL,
        enabled => FALSE,
        auto_drop => FALSE,
        comments => '');

    DBMS_SCHEDULER.RUN_JOB(job_name => 'SELECT_FROM_A_JOB', USE_CURRENT_SESSION => false);
    DBMS_SCHEDULER.RUN_JOB(job_name => 'SELECT_FROM_B_JOB', USE_CURRENT_SESSION => false);
    DBMS_SCHEDULER.RUN_JOB(job_name => 'SELECT_FROM_C_JOB', USE_CURRENT_SESSION => false);
    DBMS_SCHEDULER.RUN_JOB(job_name => 'SELECT_FROM_D_JOB', USE_CURRENT_SESSION => false);

    DBMS_SCHEDULER.STOP_JOB(job_name => 'SELECT_FROM_A_JOB');
    DBMS_SCHEDULER.STOP_JOB(job_name => 'SELECT_FROM_B_JOB');
    DBMS_SCHEDULER.STOP_JOB(job_name => 'SELECT_FROM_C_JOB');
    DBMS_SCHEDULER.STOP_JOB(job_name => 'SELECT_FROM_D_JOB');
END;
/
